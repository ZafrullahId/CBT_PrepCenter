// <auto-generated />
using System;
using CBTPreparation.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CBTPreparation.Infrastructure.Migrations
{
    [DbContext(typeof(CBTDbContext))]
    [Migration("20241006095610_ddd_v1")]
    partial class ddd_v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cbtprep")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CBTPreparation.Domain.AdminAggregate.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Admins", "cbtprep");
                });

            modelBuilder.Entity("CBTPreparation.Domain.CbtSessionAggregate.CbtSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentQuestionNumberInProgress")
                        .HasColumnType("int");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("InProgress")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfCorrectAnswers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestion")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestionAttempted")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfWrongAnswers")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CbtSessions", "cbtprep");
                });

            modelBuilder.Entity("CBTPreparation.Domain.FreeQuestionAggregate.FreeQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FreeQuestions", "cbtprep");
                });

            modelBuilder.Entity("CBTPreparation.Domain.StudentAggregate.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnusedTrials")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Students", "cbtprep");
                });

            modelBuilder.Entity("CBTPreparation.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1044)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1044)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOAuthProvider")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "cbtprep");
                });

            modelBuilder.Entity("CBTPreparation.Domain.AdminAggregate.Admin", b =>
                {
                    b.OwnsOne("CBTPreparation.Domain.UserAggregate.UserId", "UserId", b1 =>
                        {
                            b1.Property<Guid>("AdminId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("UserId");

                            b1.HasKey("AdminId");

                            b1.ToTable("Admins", "cbtprep");

                            b1.WithOwner()
                                .HasForeignKey("AdminId");
                        });

                    b.Navigation("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("CBTPreparation.Domain.CbtSessionAggregate.CbtSession", b =>
                {
                    b.OwnsMany("CBTPreparation.Domain.CbtSessionAggregate.SessionQuestion", "SessionQuestions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CbtSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ChosenOption")
                                .HasColumnType("nvarchar(1)");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<Guid?>("DeletedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("DeletedOn")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsChosenOptionCorrect")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("bit");

                            b1.Property<Guid>("LastModifiedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("LastModifiedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Question")
                                .IsRequired()
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("CbtSessionId");

                            b1.ToTable("SessionQuestions", "cbtprep");

                            b1.WithOwner()
                                .HasForeignKey("CbtSessionId");

                            b1.OwnsMany("CBTPreparation.Domain.CbtSessionAggregate.PaidOption", "PaidOptions", b2 =>
                                {
                                    b2.Property<Guid>("SessionQuestionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("ImageUrl")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<bool>("IsCorrect")
                                        .HasColumnType("bit");

                                    b2.Property<string>("OptionAlpha")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(1)");

                                    b2.Property<string>("OptionContent")
                                        .IsRequired()
                                        .IsUnicode(true)
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SessionQuestionId", "Id");

                                    b2.ToTable("PaidOptions", "cbtprep");

                                    b2.WithOwner()
                                        .HasForeignKey("SessionQuestionId");
                                });

                            b1.Navigation("PaidOptions");
                        });

                    b.OwnsOne("CBTPreparation.Domain.StudentAggregate.StudentId", "StudentId", b1 =>
                        {
                            b1.Property<Guid>("CbtSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("StudentId");

                            b1.HasKey("CbtSessionId");

                            b1.ToTable("CbtSessions", "cbtprep");

                            b1.WithOwner()
                                .HasForeignKey("CbtSessionId");
                        });

                    b.Navigation("SessionQuestions");

                    b.Navigation("StudentId")
                        .IsRequired();
                });

            modelBuilder.Entity("CBTPreparation.Domain.FreeQuestionAggregate.FreeQuestion", b =>
                {
                    b.OwnsMany("CBTPreparation.Domain.FreeQuestionAggregate.FreeOption", "FreeOptions", b1 =>
                        {
                            b1.Property<Guid>("FreeQuestionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("ImageUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsCorrect")
                                .HasColumnType("bit");

                            b1.Property<string>("OptionAlpha")
                                .IsRequired()
                                .HasColumnType("nvarchar(1)");

                            b1.Property<string>("OptionContent")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FreeQuestionId", "Id");

                            b1.ToTable("FreeOption", "cbtprep");

                            b1.WithOwner()
                                .HasForeignKey("FreeQuestionId");
                        });

                    b.Navigation("FreeOptions");
                });

            modelBuilder.Entity("CBTPreparation.Domain.StudentAggregate.Student", b =>
                {
                    b.OwnsMany("CBTPreparation.Domain.StudentAggregate.Course", "Courses", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(20)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Course_Name");

                            b1.HasKey("StudentId", "Id");

                            b1.ToTable("Course", "cbtprep");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("CBTPreparation.Domain.StudentAggregate.Department", "Department", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(20)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Department_Name");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students", "cbtprep");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsMany("CBTPreparation.Domain.StudentAggregate.Feedback", "Feedbacks", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Comment")
                                .IsRequired()
                                .HasMaxLength(150)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<Guid?>("DeletedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("DeletedOn")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("bit");

                            b1.Property<Guid>("LastModifiedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("LastModifiedOn")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("StudentId");

                            b1.ToTable("Feedbacks", "cbtprep");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("CBTPreparation.Domain.UserAggregate.UserId", "UserId", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("UserId");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students", "cbtprep");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsMany("CBTPreparation.Domain.StudentAggregate.TrialTransaction", "Transactions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<Guid?>("DeletedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("DeletedOn")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("bit");

                            b1.Property<Guid>("LastModifiedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("LastModifiedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("PaymentMethod")
                                .IsRequired()
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset>("PurchaseDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("TotalAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("TrialPrice")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("Id");

                            b1.HasIndex("StudentId");

                            b1.ToTable("TrialTransactions", "cbtprep");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("Courses");

                    b.Navigation("Department");

                    b.Navigation("Feedbacks");

                    b.Navigation("Transactions");

                    b.Navigation("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("CBTPreparation.Domain.UserAggregate.User", b =>
                {
                    b.OwnsOne("CBTPreparation.Domain.UserAggregate.Role", "Role", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Role_Name");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "cbtprep");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Role")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
